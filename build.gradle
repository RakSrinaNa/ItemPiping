buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.github.breadmoirai.github-release" version "2.2.9"
    id 'com.novoda.build-properties' version '0.4.1'
}

buildProperties {
    secrets {
        using(file('secrets.properties')).or(System.getenv()).or([
                "curseforge_api_key": "N/A",
                "github_token"      : "N/A"
        ])
    }
}

apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: "com.github.breadmoirai.github-release"

repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
    mavenLocal()
    jcenter()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-Xlint:deprecation']
}

javadoc {
    failOnError = false
}

archivesBaseName = project.archivesBaseName
def versionInfo = getModVersion()
System.out.println(versionInfo)
version = "${versionInfo['version']}"
def build_num = getBuildNumber()

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: project.mcp_channel.toString(), version: project.mcp_mappings.toString()

    runs {
        client {
            property 'forge.logging.markers', 'SCAN,REGISTRIES' //REGISTRYDUMP
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run-client')

            mods {
                item_piping {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run-server')
            mods {
                item_piping {
                    source sourceSets.main
                }
            }
        }

        data {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run')

            args '--mod', 'item_piping', '--all', '--output', file('src/generated/resources/')

            mods {
                item_piping {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"
}

jar {
    appendix = "${project.mc_version}"
    manifest {
        attributes(["Specification-Title"     : project.mod_id,
                    "Specification-Vendor"    : "RakSrinaNa",
                    "Specification-Version"   : "0.2",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "RakSrinaNa",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

task deobfJar(type: Jar) {
    appendix = "${project.mc_version}"
    classifier = 'deobf'
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    appendix = "${project.mc_version}"
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    appendix = "${project.mc_version}"
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

curseforge {
    apiKey = buildProperties.secrets['curseforge_api_key'].string
    project {
        id = "${project.curseforge_project_id}"
        changelogType = 'markdown'
        addGameVersion "${project.mc_version}"
        changelog = getLatestChangeLog()
        releaseType = "${project.curseforge_release_type}"
        mainArtifact(jar) {
            displayName = "${project.archivesBaseName}-${project.mc_version}-${project.version}"
        }
    }
    options {
        debug = false
        javaVersionAutoDetect = false
    }
}

githubRelease {
    owner = "RakSrinaNa"
    repo = project.repoName
    token = buildProperties.secrets['github_token'].string
    tagName = "${project.mc_version}-${project.version}"
    releaseName = "${project.mc_version}-${versionInfo['version_short']}"
    targetCommitish = "${project.mc_version}"
    body {
        return getLatestChangeLog()
    }
}

artifacts {
    if (project.hasProperty('doDeobfJar')) {
        archives deobfJar
    }
    if (project.hasProperty('doSourceJar')) {
        archives sourcesJar
    }
    if (project.hasProperty('doJavadocJar')) {
        archives javadocJar
    }
}

// Version stuff

def getModVersion() {
    try {
        return getGitVersion()
    } catch (Exception ex) {
        System.out.println("Git version failed, falling back to old method")
        return getVersion('VERSION', getModFile())
    }
}

def getGitVersion() {
    // Call git command
    def outStream = new ByteArrayOutputStream()
    def result = exec {
        executable = 'git'
        args = ['describe', '--long']
        standardOutput = outStream
    }

    def fullVersion = outStream.toString().trim()
    def matcher = fullVersion =~ /(\d+).(\d+).(\d+)-(.*)/

    def maj = matcher[0][1]
    def min = matcher[0][2]
    def rev = matcher[0][3]
    def bn = getBuildNumber()

    return makeVersionMap(maj, min, rev, bn, matcher[0][4])
}

static def makeVersionMap(maj, min, rev, bn, githash) {
    def out = [:]
    out['build.major.number'] = maj.toString()
    out['build.minor.number'] = min.toString()
    out['build.revision.number'] = rev.toString()
    out['build.githash'] = githash
    out['build.number'] = bn.toString()
    out['version_short'] = "${maj}.${min}.${rev}".toString()
    out['version'] = "${maj}.${min}.${rev}+${bn}".toString()
    return out
}

// Modified old version getter
def getVersion(String type, String mod_file) {
    String maj = '0'
    String min = '0'
    String rev = '0'
    String bn = getBuildNumber()

    File file = file(mod_file)
    def prefix = ~/^(?:public|protected|private) static final String $type = ".*$/
    file.eachLine { String s ->
        s = s.trim()
        if (s ==~ prefix || prefix.matcher(s).matches()) {
            String[] bits = s.split("=")
            String interesting = bits[1].trim()
            interesting = interesting.substring(1, interesting.length() - 2)
            String[] pts = interesting.trim().split("\\.")

            maj = pts[0] ?: '0'
            min = pts[1] ?: '0'
            rev = pts[2] ?: '0'
        }
    }

    return makeVersionMap(maj, min, rev, bn, 'unknown')
}

// Used by old getVersion
String getModFile() {
    String path = ''
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include '**/*.java'
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim()
                if (s.startsWith('@Mod(')) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path
}

// Build number tracking

String getBuildNumber() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        return versionProps['build_num'].toString()
    }
    return "1"
}

task incrementBuild {
    doFirst {
        def versionFile = file('version.properties')
        if (versionFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionFile))
            def num = versionProps['build_num'].toInteger() + 1
            println("incrementing BuildNumber to: " + num)
            versionProps['build_num'] = num.toString()
            versionProps.store(versionFile.newWriter(), null)
        } else {
            println("version.properties file not found! Ignoring.")
        }
    }
}
build.finalizedBy incrementBuild // only increment on successful builds

// Update JSON management

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.concurrent.TimeUnit

def writeUpdateJson() {
    def version = getModVersion()['version_short']
    def slurper = new JsonSlurper()
    def file = new File('update.json')
    def json = slurper.parse(file)

    // TODO: Maybe add something to create an abbreviated changelog? May not be useful...
    if (!json[project.mc_version].containsKey(version.toString()))
        json[project.mc_version][version.toString()] = project.changelogUrl
    json[project.mc_version] = json[project.mc_version].sort([compare: { a, b -> b.compareTo(a) }] as Comparator)
    json['promos']["${project.mc_version}-latest"] = version
    json['promos']["${project.mc_version}-recommended"] = version

    println(json)
    file.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)))
}

String getAllChangeLog() {
    final old_log = file("CHANGELOG.md")
    final header_file = file("header.md")

    def all_log = old_log.exists() ? old_log.text : "No change log provided."
    def header = header_file.exists() ? header_file.text : ""
    return header + System.lineSeparator() + all_log
}

String getLatestChangeLog() {
    final def log_file = file("changes.md")
    final def header_file = file("header.md")
    def log = log_file.exists() ? log_file.text : "No change log provided."
    def header = header_file.exists() ? header_file.text : ""
    return header + System.lineSeparator() + log
}

task makeChangeLog() {
    doLast {
        moveOldLog()

        ProcessBuilder commiter = new ProcessBuilder("git", "commit", "-m", "v${project.version}")
        def process1 = commiter.start()
        process1.waitFor(10L, TimeUnit.SECONDS)
        ProcessBuilder pusher = new ProcessBuilder("git", "push")
        def process2 = pusher.start()
        process2.waitFor(20L, TimeUnit.SECONDS)
    }
}

void moveOldLog() {
    def new_log_file = file("changes.md")
    def old_log_file = file("CHANGELOG.md")

    if (new_log_file.exists()) {
        if (!old_log_file.exists())
            old_log_file.createNewFile()
        def version = getModVersion()
        def dateFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd")
        def currDate = LocalDate.now()
        def combined = "## [${project.mc_version}-${version['version_short']}] - " + currDate.format(dateFormat) + System.lineSeparator() + new_log_file.text.trim() + System.lineSeparator() + System.lineSeparator() + old_log_file.text
        old_log_file.setText(combined)
    }
}

task createUpdateJson {
    doLast {
        println('Updating update.json...')
        writeUpdateJson()
    }
}
build.finalizedBy createUpdateJson
